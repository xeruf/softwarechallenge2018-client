Index: src/xerus/softwarechallenge/logic2018/Jumper1_9.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xerus.softwarechallenge.logic2018\n\nimport sc.plugin2018.GameState\nimport sc.plugin2018.Move\nimport xerus.ktutil.createDir\nimport xerus.ktutil.createFile\nimport xerus.ktutil.forRange\nimport xerus.ktutil.helpers.Timer\nimport xerus.softwarechallenge.util.F\nimport xerus.softwarechallenge.util.MP\nimport xerus.softwarechallenge.util.str\nimport java.nio.file.Path\nimport java.util.*\nimport kotlin.math.pow\n\nobject Jumper1_9 : CommonLogic() {\n\t\n\t/** Karotten, Salat, Threshold */\n\toverride fun defaultParams() = doubleArrayOf(3.0, 30.0)\n\t\n\t/** sucht den besten Move per Breitensuche basierend auf dem aktuellen GameState */\n\toverride fun findBestMove(): Move? {\n\t\tval mp = MP()\n\t\t\n\t\tvar moves = currentState.findMoves()\n\t\tfor (move in moves) {\n\t\t\tval newState = currentState.test(move, moveOther = false) ?: continue\n\t\t\tif (newState.me.gewonnen())\n\t\t\t\treturn move\n\t\t\t// Evaluation\n\t\t\tval points = evaluate(newState)\n\t\t\tmp.update(move, points)\n\t\t\t// Queue\n\t\t\tqueue.add(Node(move, newState, points))\n\t\t}\n\t\t\n\t\tvar bestMove = mp.obj\n\t\tif (currentTurn > 57)\n\t\t\treturn bestMove\n\t\tif (queue.size < 2) {\n\t\t\tif (bestMove != null) {\n\t\t\t\tlogger.info(\"Nur einen validen Zug gefunden: ${bestMove.str()}\")\n\t\t\t} else {\n\t\t\t\tbestMove = moves.first()\n\t\t\t\tlogger.warn(\"Keinen sinnvollen Zug gefunden, sende ${bestMove.str()}!\")\n\t\t\t}\n\t\t\treturn bestMove\n\t\t}\n\t\t\n\t\t// Breitensuche\n\t\tdepth = 1\n\t\tvar maxDepth = 5.coerceAtMost(60.minus(currentTurn) / 2)\n\t\tvar node = queue.poll()\n\t\tvar nodeState: GameState\n\t\tvar subDir: Path? = null\n\t\tvar acceptedMoves: Int\n\t\tloop@ while (depth < maxDepth && queue.size > 0) {\n\t\t\tacceptedMoves = 0\n\t\t\tdepth = node.depth\n\t\t\tval divider = depth.toDouble().pow(0.3)\n\t\t\tdo {\n\t\t\t\tnodeState = node.gamestate.quickMove()?.second ?: continue\n\t\t\t\tif (Timer.runtime() > 1600)\n\t\t\t\t\tbreak@loop\n\t\t\t\t// todo explore other possible enemy moves\n\t\t\t\tmoves = nodeState.findMoves()\n\t\t\t\tforRange(0, moves.size) { i ->\n\t\t\t\t\tif (Timer.runtime() > 1700)\n\t\t\t\t\t\treturn@forRange\n\t\t\t\t\tval move = moves[i]\n\t\t\t\t\tval newState = nodeState.test(move, i < moves.lastIndex, false) ?: return@forRange\n\t\t\t\t\t// Evaluation\n\t\t\t\t\tval points = evaluate(newState) / divider + node.points\n\t\t\t\t\tif (points < mp.points - 50.0 / divider)\n\t\t\t\t\t\treturn@forRange\n\t\t\t\t\tval update = mp.update(node.move, points)\n\t\t\t\t\t// Debug\n\t\t\t\t\tacceptedMoves++\n\t\t\t\t\tif (isDebug) {\n\t\t\t\t\t\tsubDir = node.dir?.resolve(\"%.1f: %s ㊝%s ✖%s ${newState.enemy.lastNonSkipAction.str()}\"\n\t\t\t\t\t\t\t\t.format(points, move.str(), newState.me.strShortest(), newState.enemy.strShortest()))?.createDir()\n\t\t\t\t\t\tif (update) {\n\t\t\t\t\t\t\tnode.dir?.resolve(\"Best: %.1f - %s\".format(points, move.str()))?.createFile()\n\t\t\t\t\t\t\tprintln(currentLogDir?.relativize(subDir))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Queue\n\t\t\t\t\tif (Timer.runtime() > 1000 || newState.me.gewonnen())\n\t\t\t\t\t\tmaxDepth = depth\n\t\t\t\t\tif (depth < maxDepth && !nodeState.enemy.gewonnen())\n\t\t\t\t\t\tqueue.add(node.update(newState, points, subDir))\n\t\t\t\t}\n\t\t\t\tif (Timer.runtime() > 1600)\n\t\t\t\t\tbreak@loop\n\t\t\t\tnode = queue.poll() ?: break\n\t\t\t} while (depth == node.depth)\n\t\t\tif (bestMove != mp.obj!!) {\n\t\t\t\tdepthUsed = depth\n\t\t\t\tbestMove = mp.obj!!\n\t\t\t}\n\t\t\tlogger.info(\"Bester Zug bei Tiefe $depth: $mp, accepted $acceptedMoves\")\n\t\t}\n\t\treturn bestMove\n\t}\n\t\n\toverride fun clear() {\n\t\tqueue.clear()\n\t}\n\t\n\tprivate val queue: Queue<Node> = ArrayDeque<Node>(8000)\n\t\n\tprivate class Node(@F val move: Move, @F val gamestate: GameState, @F val points: Double, @F val depth: Int, @F val dir: Path?) {\n\t\t\n\t\tconstructor(move: Move, state: GameState, points: Double) : this(move, state, points, 1,\n\t\t\t\tcurrentLogDir?.resolve(\"%.1f - %s\".format(points, move.str()))?.createDir())\n\t\t\n\t\tfun update(newState: GameState, newPoints: Double, dir: Path?) =\n\t\t\t\tNode(move, newState, newPoints, depth + 1, dir)\n\t\t\n\t\toverride fun toString() = \"Node depth %d %s points %.1f\".format(depth, move.str(), points)\n\t\t\n\t}\n\t\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/xerus/softwarechallenge/logic2018/Jumper1_9.kt	(date 1528131424000)
+++ src/xerus/softwarechallenge/logic2018/Jumper1_9.kt	(date 1528169120000)
@@ -15,8 +15,29 @@
 
 object Jumper1_9 : CommonLogic() {
 	
-	/** Karotten, Salat, Threshold */
-	override fun defaultParams() = doubleArrayOf(3.0, 30.0)
+	fun points(state: GameState): Double {
+		val player = state.me
+		val distanceToGoal = 65.0 - player.fieldIndex
+		var points = 0.0
+		
+		// Salat und Karten
+		points += saladPoints(player.salads, distanceToGoal) // * 0.3
+		points += player.ownsCardOfType(CardType.EAT_SALAD).to(saladParam * 0.8, 0.0)
+		points += player.ownsCardOfType(CardType.TAKE_OR_DROP_CARROTS).to(carrotParam * 0.8, 0.0)
+		//if (fieldTypeAt(index) == FieldType.SALAD)
+		//	points += saladParam / 2
+		points += player.cards.size * 2
+		
+		// Karotten
+		points += carrotPoints(player.carrots.toDouble(), distanceToGoal) * 3
+		points -= carrotPoints(state.enemy)
+		
+		// Zieleinlauf
+		return points + goalPoints(player)
+	}
+	
+	/** Karotten, Salat */
+	override fun defaultParams() = doubleArrayOf(3.0, 20.0)
 	
 	/** sucht den besten Move per Breitensuche basierend auf dem aktuellen GameState */
 	override fun findBestMove(): Move? {
@@ -28,8 +49,8 @@
 			if (newState.me.gewonnen())
 				return move
 			// Evaluation
-			val points = evaluate(newState)
-			mp.update(move, points)
+			val points = points(newState)
+			mp.update(move, points + newState.me.fieldIndex)
 			// Queue
 			queue.add(Node(move, newState, points))
 		}
@@ -70,17 +91,18 @@
 					val move = moves[i]
 					val newState = nodeState.test(move, i < moves.lastIndex, false) ?: return@forRange
 					// Evaluation
-					val points = evaluate(newState) / divider + node.points
-					if (points < mp.points - 50.0 / divider)
+					val points = points(newState) / divider + node.points
+					val evaluation = points + newState.me.fieldIndex
+					if (evaluation < mp.points - 50.0 / divider)
 						return@forRange
-					val update = mp.update(node.move, points)
+					val update = mp.update(node.move, evaluation)
 					// Debug
 					acceptedMoves++
 					if (isDebug) {
 						subDir = node.dir?.resolve("%.1f: %s ㊝%s ✖%s ${newState.enemy.lastNonSkipAction.str()}"
-								.format(points, move.str(), newState.me.strShortest(), newState.enemy.strShortest()))?.createDir()
+								.format(evaluation, move.str(), newState.me.strShortest(), newState.enemy.strShortest()))?.createDir()
 						if (update) {
-							node.dir?.resolve("Best: %.1f - %s".format(points, move.str()))?.createFile()
+							node.dir?.resolve("Best: %.1f - %s".format(evaluation, move.str()))?.createFile()
 							println(currentLogDir?.relativize(subDir))
 						}
 					}
